// libraryDependencies += "com.lihaoyi" %% "fastparse" % "2.2.2"
// http://www.lihaoyi.com/fastparse
import fastparse._, NoWhitespace._

object Parse extends App {

  sealed trait LilyExpr
  case class Dur(power: Int, numDots: Int) extends LilyExpr
  case class Note(step: Int, accidentals: Int, duration: Dur) extends LilyExpr

  def parseStep[_ : P] = P(("a" | "b" | "c" | "d" | "e" | "f" | "g").!.map {
    case "a" => 5
    case "b" => 6
    case "c" => 0
    case "d" => 1
    case "e" => 2
    case "f" => 3
    case "g" => 4
  })

  def parseFlat[_ : P] = P(("e".? ~ "s").rep(1).!.map(- _.count(_ == 's')))
  def parseSharp[_ : P] = P("is".rep(1).!.map(_.count(_ == 's')))
  def parseAccidental[_ : P] = P(parseFlat | parseSharp | "".!.map(_ => 0))

  def parseDurPower[_ : P] = P(("1" | "2" | "4" | "8" | "16" | "32" | "64").!.map{
    case "1" => 0
    case "2" => 1
    case "4" => 2
    case "8" => 3
    case "16" => 4
    case "32" => 5
    case "64" => 6
  })
  def parseDurDots[_ : P] = P(".".rep.!.map(_.length))
  def parseDur[_ : P] = P(parseDurPower ~ parseDurDots).map { case (power, numDots) => Dur(power, numDots) }

  def parseNote[_ : P] = P((parseStep ~ parseAccidental ~ parseDur).map { case (step, accidentals, dur) => Note(step, accidentals, dur)})

  val res = parse("bis16", parseNote(_))

  println(res)

}